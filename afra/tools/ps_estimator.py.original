import numpy as np
import healpy as hp
import pymaster as nmt
from afra.tools.icy_decorator import icy


@icy
class pstimator(object):

    def __init__(self, nside, mask=None, aposcale=None, psbin=None, lmin=None, lmax=None, lbin=None, targets='T', filt=None):
        """
        Parameters
        ----------
        nside : integer
            HEALPix Nside.
        
        mask : numpy.ndarray
            A single-vector array of mask map.
        
        aposcale : float
            Apodization size in deg.
        
        psbin : (positive) integer
            Number of PS bins.
        
        lmin : (positive) integer
            Minimal angular mode.
        
        lmax : (positive) integer
            Maximal angular mode.

        lbin : (positive) integer
            Angular mode bin size for NaMaster calculation.
        
        targets : string
            Choosing among 'T', 'E', 'B', 'EB', 'TEB' mode.

        filt : dict
            filtering effect in BP, recording extra mixing/rescaling of BP
        """
        self.nside = nside
        self.aposcale = aposcale
        self.lbin = None
        self.lmin = lmin
        self.lmax = lmax
        self.mask = mask
        self.b = None
        self.psbin = psbin
        self.targets = targets
        self.filt = filt
        self._autowdict = {'T':self.autoWSP_T,'E':self.autoWSP_E,'B':self.autoWSP_B,'EB':self.autoWSP_EB,'TEB':self.autoWSP_TEB}
        self._croswdict = {'T':self.crosWSP_T,'E':self.crosWSP_E,'B':self.crosWSP_B,'EB':self.crosWSP_EB,'TEB':self.crosWSP_TEB}
        self._autodict = {'T':self.autoBP_T,'E':self.autoBP_E,'B':self.autoBP_B,'EB':self.autoBP_EB,'TEB':self.autoBP_TEB}
        self._crosdict = {'T':self.crosBP_T,'E':self.crosBP_E,'B':self.crosBP_B,'EB':self.crosBP_EB,'TEB':self.autoBP_TEB}

    @property
    def nside(self):
        return self._nside

    @property
    def npix(self):
        return self._npix

    @property
    def mask(self):
        return self._mask

    @property
    def apomask(self):
        return self._apomask

    @property
    def b(self):
        return self._b

    @property
    def aposcale(self):
        return self._aposcale

    @property
    def nmode(self):
        return self._nmode

    @property
    def lbin(self):
        return self._lbin

    @property
    def psbin(self):
        return self._psbin

    @property
    def lmin(self):
        return self._lmin

    @property
    def lmax(self):
        return self._lmax

    @property
    def modes(self):
        return self._modes

    @property
    def targets(self):
        return self._targets

    @property
    def ntarget(self):
        return self._ntarget

    @property
    def filt(self):
        return self._filt

    @nside.setter
    def nside(self, nside):
        assert isinstance(nside, int)
        assert (nside > 0)
        self._nside = nside
        self._npix = 12*self._nside**2

    @mask.setter
    def mask(self, mask):
        if mask is None:
            self._mask = np.ones(self._npix,dtype=np.float64)
            self._apomask = np.ones(self._npix,dtype=np.float64)
        else:
            assert isinstance(mask, np.ndarray)
            assert (len(mask) == self._npix)
            self._mask = mask.copy()
            self._apomask = nmt.mask_apodization(self._mask, self._aposcale, apotype='C2')

    @aposcale.setter
    def aposcale(self, aposcale):
        if aposcale is None:
            self._aposcale = 0.0
        else:
            assert (aposcale > 0)
            self._aposcale = aposcale

    @lbin.setter
    def lbin(self, lbin):
        if lbin is None:
            self._lbin = 5
        else:
            assert isinstance(lbin, int)
            assert (lbin > 0)
            self._lbin = lbin

    @lmin.setter
    def lmin(self, lmin):
        if lmin is None:
            self._lmin = 2
        else:
            assert isinstance(lmin, int)
            assert (lmin < 3*self._nside)
            self._lmin = lmin

    @lmax.setter
    def lmax(self, lmax):
        if lmax is None:
            self._lmax = 2*self._nside
        else:
            assert isinstance(lmax, (int,np.int64))
            assert (lmax < 3*self._nside)
            self._lmax = lmax

    @b.setter
    def b(self, b):
        if b is None:
            """customize NaMaster multipole band object"""
            ell_ini = np.arange((self._lmax-self._lmin)//self._lbin)*self._lbin + self._lmin
            ell_end = ell_ini + self._lbin
            self._b = nmt.NmtBin.from_edges(ell_ini, ell_end, is_Dell=True)
            self.lmax = self._b.lmax  # correct lmax
        else:
            self._b = b

    @psbin.setter
    def psbin(self, psbin):
        if psbin is None:
            self._psbin = 2
        else:
            assert isinstance(psbin, int)
            assert (psbin > 1)
            self._psbin = psbin
            self.modes = self.robin(self._b.get_effective_ells())

    @modes.setter
    def modes(self, modes):
        assert isinstance(modes, (list,tuple,np.ndarray))
        self._modes = modes
        self._nmode = len(modes)

    @targets.setter
    def targets(self, targets):
        assert isinstance(targets, str)
        self._targets = targets
        self._ntarget = len(targets)

    @filt.setter
    def filt(self, filt):
        if filt is not None:
            assert isinstance(filt, dict)
            assert (self._targets in filt)
        self._filt = filt

    def robin(self, bp):
        assert (len(bp)%self._psbin == 0)
        bbp = np.empty(self._psbin, dtype=np.float64)
        width = len(bp)//self._psbin
        for i in range(self._psbin):
            bbp[i] = np.mean(bp[width*i:width*(i+1)])
        return bbp[:-1]  # discard the last bin

    def bpconvert(self, ps):
        """
        "top-hat" window function matrix
        for converting PS into band-powers

        Parameters
        ----------
            input power-spectrum in multipole range (lmin:lmax+1)
        
        Return
        ----------
            band-power converting matrix in shape (# eff-ell)
        """
        raw_conv = self._b.bin_cell(ps)
        if (raw_conv.ndim == 1):
            return self.robin(raw_conv)
        else:
            fine_conv = np.empty((raw_conv.shape[0],self._psbin-1),dtype=np.float64)
            for i in range(fine_conv.shape[0]):
                fine_conv[i] = self.robin(raw_conv[i])
            return fine_conv

    def filtrans(self, bp):
        """
        apply filtering effect on band-powers.

        Parameters
        ----------
        
        bp : numpy.ndarray
            band-power in shape (# targets, # modes).

        Returns
        -------
            filtered band-power in shape (# targets, # modes).
        """
        if self._filt is None:
            return bp
        assert (bp.shape == (self._ntarget,self._nmode))
        transmat = self._filt[self._targets]
        assert (transmat.shape[0] == (bp.shape[0]*bp.shape[1]))
        return (transmat.dot(bp.reshape(-1,1))).reshape(self._ntarget,-1)

    def autoWSP(self, maps, beams=None):
        assert isinstance(maps, np.ndarray)
        assert (maps.shape == (3,self._npix))
        _cleaned = maps.copy()
        _cleaned[:,self._mask==0.] = 0.  # !!!
        # select among T, E and B
        return self._autowdict[self._targets](_cleaned,beams)

    def autoWSP_T(self, maps, beams=None):
        # assemble NaMaster fields
        if beams is None:
            f0 = nmt.NmtField(self._apomask, [maps[0]])
        else:
            f0 = nmt.NmtField(self._apomask, [maps[0]], beam=hp.gauss_beam(beams, 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f0, f0, self._b)
        return w

    def autoWSP_E(self, maps, beams=None):
        # assemble NaMaster fields
        if beams is None:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False)
        else:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False, beam=hp.gauss_beam(beams, 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f2, f2, self._b)
        return w

    def autoWSP_B(self, maps, beams=None):
        # assemble NaMaster fields
        if beams is None:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams, 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f2, f2, self._b)
        return w

    def autoWSP_EB(self, maps, beams=None):
        # assemble NaMaster fields
        if beams is None:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams, 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f2, f2, self._b)
        return w

    def autoWSP_TEB(self, maps, beams=None):
        pass

    def crosWSP(self, maps, beams=[None,None]):
        assert isinstance(maps, np.ndarray)
        assert (maps.shape == (6,self._npix))
        assert (len(beams) == 2)
        _cleaned = maps.copy()
        _cleaned[:,self._mask==0.] = 0.  # !!!
        # select among T, E and B
        return self._croswdict[self._targets](_cleaned,beams)

    def crosWSP_T(self, maps, beams=[None,None]):
        # assemble NaMaster fields
        if beams[0] is None:
            f01 = nmt.NmtField(self._apomask, [maps[0]])
        else:
            f01 = nmt.NmtField(self._apomask, [maps[0]], beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f02 = nmt.NmtField(self._apomask, [maps[3]])
        else:
            f02 = nmt.NmtField(self._apomask, [maps[3]], beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f01, f02, self._b)
        return w

    def crosWSP_E(self, maps, beams=[None,None]):
        # assemble NaMaster fields
        if beams[0] is None:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False)
        else:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False, beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=True, purify_b=False)
        else:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=True, purify_b=False, beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f21, f22, self._b)
        return w

    def crosWSP_B(self, maps, beams=[None,None]):
        # assemble NaMaster fields
        if beams[0] is None:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True)
        else:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f21, f22, self._b)
        return w

    def crosWSP_EB(self, maps, beams=[None,None]):
        # assemble NaMaster fields
        if beams[0] is None:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True)
        else:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # prepare workspace
        w = nmt.NmtWorkspace()
        w.compute_coupling_matrix(f21, f22, self._b)
        return w

    def crosWSP_TEB(self, maps, beams=[None,None]):
        pass

    def autoBP(self, maps, wsp=None, beams=None):
        """
        Auto BP
        
        Parameters
        ----------
        
        maps : numpy.ndarray
            A single-row array of a single map.
        
        wsp : (PS-estimator-defined) workspace
            A template of mask-induced mode coupling matrix.
        
        beams : float
            FWHM of gaussian beams

        Returns
        -------
        
        pseudo-PS results : tuple of numpy.ndarray
            (ell, XX, wsp(if input wsp is None))
        """
        assert isinstance(maps, np.ndarray)
        assert (maps.shape == (3,self._npix))
        _cleaned = maps.copy()
        _cleaned[:,self._mask==0.] = 0.  # !!!
        # select among T, E and B
        return self._autodict[self._targets](_cleaned,wsp,beams)

    def crosBP(self, maps, wsp=None, beams=[None,None]):
        """
        Cross BP
        
        Parameters
        ----------
        
        maps : numpy.ndarray
            A single-row array of a single map.
        
        wsp : (PS-estimator-defined) workspace
            A template of mask-induced mode coupling matrix.
        
        beams : float
            FWHM of gaussian beams.
        
        Returns
        -------
        
        pseudo-PS results : tuple of numpy.ndarray
            (ell, XX, wsp(if input wsp is None))
        """
        assert isinstance(maps, np.ndarray)
        assert (maps.shape == (6,self._npix))
        assert (len(beams) == 2)
        _cleaned = maps.copy()
        _cleaned[:,self._mask==0.] = 0.  # !!!
        # select among T, E and B
        return self._crosdict[self._targets](_cleaned,wsp,beams)

    def autoBP_T(self, maps, wsp=None, beams=None):
        dat = maps[0]
        # assemble NaMaster fields
        if beams is None:
            f0 = nmt.NmtField(self._apomask, [dat])
        else:
            f0 = nmt.NmtField(self._apomask, [dat], beam=hp.gauss_beam(beams, 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl00 = nmt.compute_full_master(f0, f0, self._b)
            return (self._modes, self.robin(cl00[0]))
        else:
            cl00c = nmt.compute_coupled_cell(f0, f0)
            cl00 = wsp.decouple_cell(cl00c)
            return (self._modes, self.robin(cl00[0]))

    def crosBP_T(self, maps, wsp=None, beams=[None,None]):
        dat1 = maps[0]
        dat2 = maps[3]
        # assemble NaMaster fields
        if beams[0] is None:
            f01 = nmt.NmtField(self._apomask, [dat1])
        else:
            f01 = nmt.NmtField(self._apomask, [dat1], beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f02 = nmt.NmtField(self._apomask, [dat2])
        else:
            f02 = nmt.NmtField(self._apomask, [dat2], beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl00 = nmt.compute_full_master(f01, f02, self._b)
            return (self._modes, self.robin(cl00[0]))
        else:
            cl00c = nmt.compute_coupled_cell(f01, f02)
            cl00 = wsp.decouple_cell(cl00c)
            return (self._modes, self.robin(cl00[0]))

    def autoBP_E(self, maps, wsp=None, beams=None):
        # assemble NaMaster fields
        if beams is None:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False)
        else:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False, beam=hp.gauss_beam(beams, 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl22 = nmt.compute_full_master(f2, f2, self._b)
            return (self._modes, self.robin(cl22[0]))
        else:
            cl22c = nmt.compute_coupled_cell(f2, f2)
            cl22 = wsp.decouple_cell(cl22c)
            return (self._modes, self.robin(cl22[0]))

    def crosBP_E(self, maps, wsp=None, beams=[None,None]):
        # assemble NaMaster fields
        if beams[0] is None:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False)
        else:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=True, purify_b=False, beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=True, purify_b=False)
        else:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=True, purify_b=False, beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl22 = nmt.compute_full_master(f21, f22, self._b)
            return (self._modes, self.robin(cl22[0]))
        else:
            cl22c = nmt.compute_coupled_cell(f21, f22)
            cl22 = wsp.decouple_cell(cl22c)
            return (self._modes, self.robin(cl22[0]))

    def autoBP_B(self, maps, wsp=None, beams=None):
        # assemble NaMaster fields
        if beams is None:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams, 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl22 = nmt.compute_full_master(f2, f2, self._b)
            return (self._modes, self.robin(cl22[3]))
        else:
            cl22c = nmt.compute_coupled_cell(f2, f2)
            cl22 = wsp.decouple_cell(cl22c)
            return (self._modes, self.robin(cl22[3]))

    def crosBP_B(self, maps, wsp=None, beams=[None,None]):
        # assemble NaMaster fields
        if beams[0] is None:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True)
        else:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl22 = nmt.compute_full_master(f21, f22, self._b)
            return (self._modes, self.robin(cl22[3]))
        else:
            cl22c = nmt.compute_coupled_cell(f21, f22)
            cl22 = wsp.decouple_cell(cl22c)
            return (self._modes, self.robin(cl22[3]))

    def autoBP_EB(self, maps, wsp=None, beams=None):
        # assemble NaMaster fields
        if beams is None:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f2 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams, 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl22 = nmt.compute_full_master(f2, f2, self._b)
            return (self._modes, self.robin(cl22[0]), self.robin(cl22[3]))
        else:
            cl22c = nmt.compute_coupled_cell(f2, f2)
            cl22 = wsp.decouple_cell(cl22c)
            return (self._modes, self.robin(cl22[0]), self.robin(cl22[3]))

    def crosBP_EB(self, maps, wsp=None, beams=[None,None]):
        # assemble NaMaster fields
        if beams[0] is None:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True)
        else:
            f21 = nmt.NmtField(self._apomask, [maps[1], maps[2]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[0], 3*self._nside-1))
        if beams[1] is None:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True)
        else:
            f22 = nmt.NmtField(self._apomask, [maps[4], maps[5]], purify_e=False, purify_b=True, beam=hp.gauss_beam(beams[1], 3*self._nside-1))
        # estimate PS
        if wsp is None:
            cl22 = nmt.compute_full_master(f21, f22, self._b)
            return (self._modes, self.robin(cl22[0]), self.robin(cl22[3]))
        else:
            cl22c = nmt.compute_coupled_cell(f21, f22)
            cl22 = wsp.decouple_cell(cl22c)
            return (self._modes, self.robin(cl22[0]), self.robin(cl22[3]))

    def autoBP_TEB(self, maps, wsp=None, beams=None):
        pass

    def crosBP_TEB(self, maps, wsp=None, beams=[None,None]):
        pass
